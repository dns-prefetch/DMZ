
set term off
/*
  Author:   Michael Hartley
  Date:     Fri, 15 Jul 2022 13:23:28 GMT
  Synopsis: Migration Check List - Light, should be run from a SYSDBA account.

            The runtime of mcl-light.sql depends on the number of database objects and the performance of your platform, the number of rows in tables is not a factor.  In general this
            script takes between 30 seconds and 40 minutes, on average, completing within 2 minutes

            This script is read-only,
              it does SELECT
              it does NOT insert
              it does NOT update
              it does NOT delete
              it does NOT alter
              it does NOT create
              it does NOT drop
              it does NOT grant
              it does NOT revoke


            There are 3 connection options.
              1. use sysdba for databases you install and manage
              2. use admin for automous databases
              3. create and use fjauditor for autonomous databases
                    create user fjauditor identified by <your-password-here>;
                    grant CREATE SESSION to fjauditor;
                    grant SELECT on SYS.REGISTRY$HISTORY to fjauditor;
                    grant SELECT_CATALOG_ROLE to fjauditor;
                    grant DV_SECANALYST to fjauditor;
                    grant AUDIT_VIEWER to fjauditor;
                    grant CAPTURE_ADMIN to fjauditor;
                    grant SELECT on DBA_USERS_WITH_DEFPWD to fjauditor;

            There is no need to enable dbms_output or start a spool file, all this is done for you.
            e.g.
                connect un/pw@//hostname:port/service_name as sysdba
                connect un/pw@db as sysdba
                connect / as sysdba
                connect fjauditor/<your-password-here>@tns-alias


                SQL> @mcl-light.sql
                  or
                SQL> @mcl-light.sql <schema_name_1> <schema_name_2> <schema_name_3>

                Finished. The spool file is mcl-light.html
                SQL>

                Then ZIP with encryption
                zip -e mcl-light.zip mcl-light.html

                <schema_name_1> is optional.
                <schema_name_2> is optional.
                <schema_name_3> is optional.
                  When supplied, (ScriptName) will filter using the schema_name and try to collect meta data for only the filtered schema.


  Modification history: is maintained in a-change-history.txt

  Do not edit "Migration Check List - Light" directly.  As this script is generated by combining a number of individual scripts, the script will
  be overwritten by each build run.

*/
set term on
set term off

set arraysize 200
set colsep ","
set echo off
set feedback off
set flush off
set heading on
set linesize 5000
set pagesize 2000
--set serveroutput on format truncated
set serveroutput on size 1000000 format wrapped
set trimout on
set trimspool on
set verify off
set wrap off
set timing on

define time_start
define time_stop
define version="Fri, 15 Jul 2022 13:23:28 GMT"

set truncate off
set numwidth 15

SET MARKUP HTML ON PREFORMAT OFF ENTMAP OFF SPOOL ON HEAD " -
<meta name='author' content='Michael Hartley'> -
<meta name='version' content='Fri, 15 Jul 2022 13:23:28 GMT'> -
<meta name='title' content='Migration Check List - Light'> -
<title>Migration Check List - Light</title> -
<style id=myStyles>.x {border: solid 1px black;width: 300px;height: 300px;}</style>" -
BODY "" -
TABLE "class='TT'"

alter session set NLS_TERRITORY="UNITED KINGDOM";
alter session set NLS_DATE_LANGUAGE="ENGLISH";
alter session set NLS_DATE_FORMAT='YYYY-MM-DD HH24:Mi:SS';

column data_type format a30
COLUMN db_link format A15
COLUMN host format A30
COLUMN hour format A5
COLUMN object format a30
COLUMN object_name format a30
COLUMN owner format a30
COLUMN statistic_name format a30
COLUMN table_name format a30
COLUMN time_start NEW_VALUE time_start noprint
COLUMN time_stop NEW_VALUE time_stop noprint
COLUMN time_elapsed NEW_VALUE time_elapsed noprint
COLUMN type format a18
COLUMN username format A20
COLUMN AgentFilter NEW_VALUE AgentFilter

COLUMN a new_value 1
COLUMN b new_value 2
COLUMN c new_value 3

select null a, null b, null c from dual where  1=2;
select nvl(upper('&1'),'undefined') a, nvl(upper('&2'),'undefined') b, nvl(upper('&3'),'undefined') c from dual;
select decode('&1','undefined','','and a.username in (''&1'', ''&2'', ''&3'')') AgentFilter from dual;

select to_char(sysdate,'dd-mon-yyyy hh24:mi:ss') time_start from dual;

--set markup HTML OFF
--set term ON
--prompt Migration Check List - Light parameters: 1=&1 2=&2 3=&3 SchemaFilter=&AgentFilter
--set term OFF
--set markup HTML ON

spool mcl-light.html
prompt <a id="z-header"/>

prompt

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>
--.s1:  Migration Check List - Light
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>

prompt <img width=100% height=120px src="https://dns-prefetch.github.io/assets/logos/mcl.svg" alt="mcl"/>
prompt <button class="button" id="myBtn">Migration Check List - Light</button>

prompt <!-- The Modal -->

set markup HTML OFF
set timing OFF

DECLARE

  html_td_write_count NUMBER;
  m                   SYS_REFCURSOR;
  buffer              VARCHAR2(255);


  /*
    ------------------------------------------------------------------------
      Below are are the HTML utilities.  So that I do not have to keep
      writing HTML components the generic procedures can be reused.  The
      output generated here should be sympathetic to any CSS code included
      in the HTML output.
    ------------------------------------------------------------------------
  */

  PROCEDURE m_put_line(in_string IN VARCHAR2) IS

    str_len    NUMBER;
    loop_count NUMBER DEFAULT 0;

  BEGIN

    --Flush the buffer

    str_len    := nvl(length(buffer),
                      0);
    loop_count := 0;
    WHILE loop_count < str_len LOOP
      dbms_output.put_line(substr(buffer,
                                  loop_count + 1,
                                  255));
      loop_count := loop_count + 255;
    END LOOP;
    buffer := '';

    --Flush the in_string
    str_len    := nvl(length(in_string),
                      0);
    loop_count := 0;
    WHILE loop_count < str_len LOOP
      dbms_output.put_line(substr(in_string,
                                  loop_count + 1,
                                  255));
      loop_count := loop_count + 255;
    END LOOP;
  END;

  PROCEDURE m_put(in_string IN VARCHAR2) IS
    buf_len NUMBER;
    str_len NUMBER;

  BEGIN

    buf_len := nvl(length(buffer),
                   0);
    str_len := nvl(length(in_string),
                   0);

    IF ((buf_len + str_len) < 255)
    THEN
      buffer := buffer || in_string;
    ELSE
      m_put_line(in_string);
    END IF;

  END;

  PROCEDURE html_h1(p1 VARCHAR2) IS
  BEGIN
    m_put('<h1>' || TRIM(p1) || '</h1>');
  END;

  PROCEDURE html_h2(p1 VARCHAR2) IS
  BEGIN
    m_put('<h2>' || TRIM(p1) || '</h2>');
  END;

  PROCEDURE html_h3(p1 VARCHAR2) IS
  BEGIN
    m_put('<h3>' || TRIM(p1) || '</h3>');
  END;

  PROCEDURE html_screen_start IS
  BEGIN
    m_put('<div>');
  END;
  PROCEDURE html_screen_stop IS
  BEGIN
    m_put_line('</div>');
  END;
  PROCEDURE html_table_caption(p1 VARCHAR2) IS
  BEGIN
    m_put('<caption>' || TRIM(p1) || '</caption>');
  END;
  PROCEDURE html_paragraph(p1 VARCHAR2) IS
  BEGIN
    m_put_line('<p>' || TRIM(p1) || '</p>');
  END;

  PROCEDURE html_table_start IS
  BEGIN
    m_put('<table class="TT">');
  END;
  PROCEDURE html_table_stop IS
  BEGIN
    m_put_line('</table>');
  END;
  PROCEDURE html_table_row_start IS
  BEGIN
    m_put('<tr>');
  END;
  PROCEDURE html_table_row_stop IS
  BEGIN
    m_put('</tr>');
  END;
  PROCEDURE html_table_header_data(p1 VARCHAR2) IS
  BEGIN
    m_put('<th scope="col">' || TRIM(p1) || '</th>');
  END;
  PROCEDURE html_table_data_start IS
  BEGIN
    html_td_write_count := 0;
    m_put('<td>');
  END;
  PROCEDURE html_table_data_stop IS
  BEGIN
    m_put('</td>');
  END;
  PROCEDURE html_table_data_write(p1 VARCHAR2) IS
  BEGIN
    IF html_td_write_count > 0
    THEN
      m_put(' ');
    ELSE
      html_td_write_count := 1;
    END IF;
    m_put(TRIM(p1));
  END;

  PROCEDURE html_table_data(p1 VARCHAR2) IS
  BEGIN
    html_table_data_start;
    html_table_data_write(TRIM(p1));
    html_table_data_stop;
  END;
  PROCEDURE html_table_data(p1 NUMBER) IS
  BEGIN
    html_table_data(to_char(p1));
  END;

  PROCEDURE html_table_row(a VARCHAR2,
                           b VARCHAR2) IS
  BEGIN
    m_put('<tr><td align="right">' || TRIM(a) || '</td>' || '<td>' || TRIM(b) || '</td></tr>');
  END;

  PROCEDURE html_header_row(a VARCHAR2, b VARCHAR2) IS
  BEGIN
    html_table_row_start;
    html_table_header_data(TRIM(a));
    html_table_header_data(TRIM(b));
    html_table_row_stop;
  END;

  PROCEDURE html_2_col_header(a VARCHAR2,
                              b VARCHAR2) IS
  BEGIN
    html_table_row_start;
    html_table_header_data(a);
    html_table_header_data(b);
    html_table_row_stop;
  END;

  PROCEDURE user_session IS

    svalue VARCHAR2(4000);

  BEGIN

    html_table_row('Document Compiled',to_char(sysdate,'Day dd Month yyyy hh24:mi'));
    html_table_row('Schema Filter',Q'[&AgentFilter]');

    FOR rs IN (SELECT column_value RESULT
               FROM   TABLE(sys.dbms_debug_vc2coll('ACTION',
                                                   'AUDITED_CURSORID',
                                                   'AUTHENTICATED_IDENTITY',
                                                   'AUTHENTICATION_DATA',
                                                   'AUTHENTICATION_METHOD',
                                                   'AUTHENTICATION_TYPE',
                                                   'BG_JOB_ID',
                                                   'CLIENT_IDENTIFIER',
                                                   'CLIENT_INFO',
                                                   'CURRENT_BIND',
                                                   'CURRENT_SCHEMA',
                                                   'CURRENT_SQL',
                                                   'CURRENT_SQL_LENGTH',
                                                   'CURRENT_USER',
                                                   'DB_DOMAIN',
                                                   'DB_NAME',
                                                   'DB_UNIQUE_NAME',
                                                   'ENTERPRISE_IDENTITY',
                                                   'EXTERNAL_NAME',
                                                   'GLOBAL_UID',
                                                   'HOST',
                                                   'IDENTIFICATION_TYPE',
                                                   'INSTANCE',
                                                   'INSTANCE_NAME',
                                                   'IP_ADDRESS',
                                                   'ISDBA',
                                                   'LANG',
                                                   'LANGUAGE',
                                                   'MODULE',
                                                   'NETWORK_PROTOCOL',
                                                   --'NLS_CALENDAR',
                                                   'NLS_CURRENCY',
                                                   'NLS_DATE_FORMAT',
                                                   'NLS_DATE_LANGUAGE',
                                                   --'NLS_SORT',
                                                   'NLS_TERRITORY',
                                                   'OS_USER',
                                                   'POLICY_INVOKER',
                                                   'PROXY_ENTERPRISE_IDENTITY',
                                                   'PROXY_GLOBAL_UID',
                                                   'PROXY_USER',
                                                   'PROXY_USERID',
                                                   'SERVER_HOST',
                                                   'SERVICE_NAME',
                                                   'SESSIONID',
                                                   --'SESSION_USER',
                                                   'SESSION_USERID',
                                                   --'SID',
                                                   'STATEMENTID',
                                                   'TERMINAL'))) LOOP

      BEGIN
        SELECT sys_context('USERENV',
                           rs.result)
        INTO   svalue
        FROM   dual;

        IF (svalue IS NOT NULL)
        THEN
          html_table_row(rs.result,
                         svalue);
        END IF;

      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
    END LOOP;

      FOR rs IN (SELECT username,
                      machine,
                      program,
                      module,
                      action,
                      client_info
               FROM   v$session
               WHERE  sid = (SELECT sid FROM v$mystat WHERE rownum = 1)) LOOP
      html_table_row('PROGRAM',rs.program);
    END LOOP;

  END;

  PROCEDURE modal_start IS
  BEGIN
    m_put('<div id="myModal" class="modal"><div class="modal-content">');
    m_put('<table><tr valign=top><td>');

    html_table_start;
    html_table_caption('Session information');
    html_header_row('USRENV Parameter',
                    'Value');
    user_session;
    html_table_stop;

    m_put('</td>');
    m_put('<td>');
  END;
  PROCEDURE modal_stop IS
  BEGIN
    m_put_line('</div></div>');
  END;
  PROCEDURE modal_header(header VARCHAR2) IS
  BEGIN
    m_put('<div class="modal-header"><span class="close"></span>');
    m_put('<b>' || header || '</b>');
    m_put('</div>');
  END;
  PROCEDURE modal_footer(footer VARCHAR2) IS
  BEGIN
    m_put('<div class="modal-footer">');
    html_paragraph(footer);
    m_put('</div>');
  END;
  PROCEDURE modal_body_start IS
  BEGIN
    m_put('<div class="modal-body">');
  END;
  PROCEDURE modal_body_stop IS
  BEGIN
    m_put('</td>');
    m_put('</tr>');
    m_put('</table>');
    m_put('</div>');
  END;
  procedure svg_image IS
  BEGIN
    m_put('<svg xmlns="http://www.w3.org/2000/svg" width="3cm" height="3cm"> <rect fill="#3C81C1" x="0" y="0" width="50" height="75"><animateTransform attributeName="transform" type="translate" from="-50 -50" to="150 120" begin="0s" dur="2s" repeatCount="indefinite" /> </rect> <circle id="my-circle" r=".5cm" cx="1.5cm" cy="1.5cm" fill="orange"> <animateTransform attributeName="transform" type="translate" from="-50 -50" to="150 20" begin="0s" dur="2s" repeatCount="indefinite" /> </circle> <g style="fill-opacity:0.7; stroke:black; stroke-width:1px;"> <circle cx="1.5cm" cy="1.5cm" r="1cm" style="fill:red;"  transform="translate(0,-25)" /> <circle cx="1.5cm" cy="1.5cm" r="1cm" style="fill:blue;" transform="translate(35,30)" /> <circle cx="1.5cm" cy="1.5cm" r="1cm" style="fill:green;" transform="translate(-35,30)"/> </g> </svg>');
  end;

BEGIN
  modal_start;
  modal_header('Migration Check List - Light');
  modal_body_start;
  html_paragraph('About.  What does it mean to be a "Migration Check List - Light"');
  html_table_start;
  html_table_caption('FAQ');
  html_table_row('.Q.',
                    '.A.');
  html_table_row('Who am I',
                 'Migration Check List - Light');
  html_table_row('What is my version',
                 '2206');
  html_table_row('What is my patch date',
                 'Fri, 15 Jul 2022 13:23:28 GMT');
  html_table_row('Who is my creator',
                 'Michael Hartley');
  html_table_row('Why am I here',
                 'In 2014, the author was writing migration gap analysis documents and was struggling to collect information he needed, so he started writing your code.');
  html_table_row('What does my version number mean?','Your version is incremented roughly every 6 months, around January and June every year.  The four digits are the year and month you were created.');
  html_table_row('What does my patch date mean?','Sometimes the author accidentally leaves a gremlin in your code, and eventually he fixes this gremlin.  The patch date represents your last build date, hopefully a date when you had some gremlins removed.');
  html_table_row('Roger that','Out');
  html_table_stop;
  svg_image;
  html_paragraph('Click outside the dialog box to close.');
  modal_body_stop;
  modal_footer('Have a great day.');
  modal_stop;

END;
/
set markup HTML ON
set timing ON

prompt <script>var modal = document.getElementById('myModal');var btn = document.getElementById("myBtn");var span = document.getElementsByClassName("close")[0];btn.onclick = function() {modal.style.display = "block";};span.onclick = function() {modal.style.display = "none";};window.onclick = function(event) {if (event.target == modal) {modal.style.display = "none";}};</script>

prompt
set markup HTML OFF
prompt <div id='Menu1'></div>
set markup HTML ON
prompt
prompt This script is read-only against the database catalogue, database objects are not created or modified.  There is no attempt to capture information contained within an application schema, other than table and column names.  If you have any table or column names that you wish to keep private, simply edit and rename the resulting spool file.  Any gap analysis performed with the data extract by this script does not rely on the table or column names, though the names may be used as points for discussion within a gap analysis document.

prompt
prompt <h1 id="Database_Summary">Database Summary</h1>

prompt
prompt Top level summary of the database configuration and sizing.
prompt

set markup HTML OFF

DECLARE

  --skip=1 when plsql block slow - else leave at 0
  skip NUMBER := 0;

  gb     NUMBER := 1024 * 1024 * 1024;
  ntemp1 NUMBER; --temporary work number
  ntemp2 NUMBER; --temporary work number
  --h1       VARCHAR2(20) := '--------------------';
  h1       VARCHAR2(20) := '<b>Section</b>';
  h2       VARCHAR2(37) := '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~';
  nf       VARCHAR2(30) := '999999999990D90';
  RESULT   VARCHAR2(100);
  sname    VARCHAR2(100);
  t1_start DATE;
  t1_stop  DATE;
  t2_start DATE;

  PROCEDURE print_start IS
  BEGIN
    dbms_output.enable(1000000);
    dbms_output.put_line('<table class="TT"><tr><th scope="col">Parameter</th><th scope="col">Value</th></tr>');
  END;

  PROCEDURE print_stop IS
  BEGIN
    dbms_output.put_line('</table>');
  END;

  PROCEDURE println2(a VARCHAR2,
                     b VARCHAR2) IS
  BEGIN
    --dbms_output.put(lpad(TRIM(a), 40, ' ') || ' , ' || TRIM(b));
    --dbms_output.put_line('');
    dbms_output.put_line('<tr><td align="right">' || TRIM(a) || '</td>' || '<td>' || TRIM(b) || '</td></tr>');
  END;

  --Collect 1 column from single row table.  Survives column missing errors in legacy database versions
  PROCEDURE print_vcol(NAME VARCHAR2,
                       pcol VARCHAR2,
                       ptab VARCHAR2) IS
    RESULT  VARCHAR2(100);
    message VARCHAR2(3) := 'N/A';
  BEGIN
    BEGIN
      EXECUTE IMMEDIATE 'select ' || pcol || ' from ' || ptab
        INTO RESULT;
    EXCEPTION
      WHEN OTHERS THEN
        RESULT := message;
    END;
    println2(NAME,
             RESULT);
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

  PROCEDURE print_vdynsql(psql VARCHAR2) IS
    /*
      psql returns 2 values: name, value
      as in
      select name, value from v$parameter
    */
    vcursor NUMBER;
    vignore INTEGER;
    vname   VARCHAR2(4000);
    vresult VARCHAR2(4000);
    --message VARCHAR2(3) := 'N/A';
  BEGIN

    vcursor := dbms_sql.open_cursor;

    dbms_sql.parse(vcursor,
                   psql,
                   dbms_sql.native);

    dbms_sql.define_column(vcursor,
                           1,
                           vname,
                           4000);
    dbms_sql.define_column(vcursor,
                           2,
                           vresult,
                           4000);

    vignore := dbms_sql.execute(vcursor);

    LOOP
      EXIT WHEN dbms_sql.fetch_rows(vcursor) = 0;

      dbms_sql.column_value(vcursor,
                            1,
                            vname);
      dbms_sql.column_value(vcursor,
                            2,
                            vresult);
      println2(vname,
               vresult);
    END LOOP;

    dbms_sql.close_cursor(vcursor);
  EXCEPTION
    WHEN OTHERS THEN
      IF (vcursor IS NOT NULL)
      THEN
        dbms_sql.close_cursor(vcursor);
      END IF;
  END;

  PROCEDURE print_db_parameter(pname       VARCHAR2,
                               pdefault    VARCHAR2,
                               pdeprecated VARCHAR2) IS

    /*    CURSOR mycur IS
    SELECT NAME,
           '[N=' || to_char(COUNT(*)) || '] ' || VALUE VALUE
    FROM   gv$parameter
    WHERE  NAME LIKE pname
           AND isdefault = pdefault
           AND isdeprecated = pdeprecated
    GROUP  BY NAME,
              VALUE
    ORDER  BY NAME,
              VALUE;*/

  BEGIN

    IF (pdeprecated = 'TRUE')
    THEN
      print_vdynsql('SELECT NAME, ''[N='' || to_char(COUNT(*)) || ''] '' || VALUE FROM gv$parameter WHERE NAME LIKE ''' ||
                    pname || ''' AND isdefault = ''' || pdefault ||
                    ''' AND isdeprecated = ''TRUE'' GROUP  BY NAME, VALUE ORDER  BY NAME, VALUE');

    ELSE
      print_vdynsql('SELECT NAME, ''[N='' || to_char(COUNT(*)) || ''] '' || VALUE FROM gv$parameter WHERE NAME LIKE ''' ||
                    pname || ''' AND isdefault = ''' || pdefault || ''' GROUP  BY NAME, VALUE ORDER  BY NAME, VALUE');

    END IF;

  EXCEPTION
    WHEN OTHERS THEN
      println2(pname,
               SQLERRM);
  END;

  PROCEDURE db IS

  BEGIN
    println2(h1,
             '+- db -+');

    --server_host 10g+ parameter
    print_vcol('Database host',
               'sys_context(''USERENV'',''SERVER_HOST'',30)',
               'dual');
    print_vcol('Host name',
               'host_name',
               'v$instance');
    print_vcol('Platform name',
               'platform_name',
               'v$database');
    print_vcol('Operating system and two task protocol version',
               'dbms_utility.port_string',
               'v$database');
    print_vcol('CPU Socket Core Count',
               'cpu_socket_count_current',
               'v$license');
    print_vcol('CPU Count',
               'cpu_count_current',
               'v$license');
    print_vcol('CPU Endian Format',
               'endian_format',
               'V$TRANSPORTABLE_PLATFORM where platform_id = (select platform_id from v$database)');
    print_vcol('Physical memory(gb)',
               'round(value/1024/1024/1024,2)',
               'v$osstat where stat_name = ''PHYSICAL_MEMORY_BYTES''');

    print_vcol('SGA + PGA(now) usage mb',
               'round(((select value from V$PGASTAT where name = ''total PGA inuse'') + (select sum(value) from v$sga))/1024/1024/1024,2)',
               'dual');
    print_vcol('SGA + PGA(max) usage mb',
               'round(((select value from V$PGASTAT where name = ''maximum PGA allocated'') + (select sum(value) from v$sga))/1024/1024/1024,2)',
               'dual');

    print_vcol('Database name',
               'name',
               'v$database');
    print_vcol('Unique name',
               'db_unique_name',
               'v$database');
    --SELECT banner INTO RESULT FROM v$version WHERE rownum = 1;
    --println2('Database version', RESULT);
    print_vcol('Database version',
               'banner',
               'v$version where rownum = 1');
    print_vcol('Created',
               'to_char(created, ''yyyy-mm-dd hh24:mi'')',
               'v$database');
    print_vcol('Age years',
               'to_char(round((SYSDATE - created) / 365, 4), ''90D90'')',
               'v$database');
    print_vcol('Time zone',
               'dbtimezone',
               'dual');
    print_vcol('Time zone version',
               'version',
               'v$timezone_file');
    print_vcol('Time zone Filename',
               'filename',
               'v$timezone_file');
    print_vcol('User count',
               'count(*)',
               'dba_users where username in (SELECT a.username FROM dba_users a, dba_users b WHERE a.created > (b.created + 1 / 24) AND b.username = ''SYS'' MINUS SELECT DISTINCT SCHEMA FROM dba_registry)');

    print_vcol('Startup time',
               'to_char(startup_time, ''yyyy-mm-dd hh24:mi'')',
               'v$instance');
    print_vcol('Open mode',
               'open_mode',
               'v$database');
    print_vcol('Current SCN',
               'current_scn || '' '' || ''AVG/y('' || round(current_scn / ((SYSDATE - created) / 365)) || '')'' || '' '' || ''AVG/m('' || round(current_scn / ((SYSDATE - created) / 365 * 12)) || '')'' || '' '' || ''AVG/d('' || round(current_scn / ((SYSDATE - created))) || '')'' || '' '' || ''AVG/hr('' || round(current_scn / ((SYSDATE - created) * 24)) || '')''',
               'v$database');
  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE cdb IS

  BEGIN
    println2(h1,
             '+- cdb -+');
    print_vcol('Am I a CDB',
               'cdb',
               'v$database');
    print_vcol('Container name',
               'sys_context(''USERENV'',''CON_NAME'',30)',
               'dual');
    --print_vdynsql('select ''container '' || con_id, name from v$containers');
    print_vdynsql('select ''container '' || con_id, name || '' ['' || round(total_size/1024/1024/1024,2) || '' gb]'' from v$containers');

  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_characters IS
    CURSOR mycur IS
      SELECT lower(parameter) sname,
             VALUE RESULT
      FROM   v$nls_parameters
      WHERE  parameter IN ('NLS_CHARACTERSET',
                           'NLS_LANGUAGE',
                           'NLS_NCHAR_CHARACTERSET',
                           'NLS_TERRITORY');

  BEGIN
    println2(h1,
             '+- db character set -+');
    FOR myrows IN mycur LOOP
      println2(myrows.sname,
               myrows.result);
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_logging IS

    CURSOR mycur0 IS
      SELECT COUNT(*) total,
             members || ' members of ' || round(bytes / 1024 / 1024,
                                                2) || ' mb' VALUE
      FROM   v$log
      GROUP  BY members || ' members of ' || round(bytes / 1024 / 1024,
                                                   2) || ' mb';

    CURSOR mycur1 IS
      SELECT COUNT(*) total,
             round(bytes / 1024 / 1024,
                   2) || ' mb' VALUE
      FROM   v$standby_log
      GROUP  BY round(bytes / 1024 / 1024,
                      2) || ' mb';

    CURSOR mycur2 IS
      SELECT dest_id,
             MIN(mbytes) min_mb,
             round(AVG(mbytes)) avg_mb,
             MAX(mbytes) max_mb,
             MIN(switches) min_swtch,
             round(AVG(switches)) avg_swtch,
             MAX(switches) max_swtch
      FROM   (SELECT dest_id,
                     trunc(completion_time,
                           'hh24') period,
                     round(SUM(blocks * block_size) / 1024 / 1024) mbytes,
                     COUNT(*) switches
              FROM   v$archived_log
              GROUP  BY dest_id,
                        trunc(completion_time,
                              'hh24'))
      GROUP  BY dest_id
      ORDER  BY 1;

  BEGIN
    println2(h1,
             '+- db logging -+');

    --FOR myrows IN mycur1 LOOP
    --  println2('Archive log hourly mb', myrows.result);
    --END LOOP;

    print_vcol('Log mode',
               'log_mode',
               'v$database');
    print_vcol('Flashback on',
               'flashback_on',
               'v$database');
    print_vcol('Force logging',
               'force_logging',
               'v$database');
    print_vcol('Block Change Tracking',
               'status',
               'v$block_change_tracking');
    print_vcol('Supplemental log data all',
               'supplemental_log_data_all',
               'v$database');
    print_vcol('Supplemental log data fk',
               'supplemental_log_data_fk',
               'v$database');
    print_vcol('Supplemental log data min',
               'supplemental_log_data_min',
               'v$database');
    print_vcol('Supplemental log data pk',
               'supplemental_log_data_pk',
               'v$database');
    print_vcol('Supplemental log data ui',
               'supplemental_log_data_ui',
               'v$database');

    --Log group review
    FOR myrows IN mycur0 LOOP
      println2(myrows.total || ' log Groups',
               myrows.value);
    END LOOP;

    --standby Log group review
    FOR myrows IN mycur1 LOOP
      println2(myrows.total || ' standby log Groups',
               myrows.value);
    END LOOP;

    --Archive log activity review
    FOR myrows IN mycur2 LOOP
      println2('Archivelog dest ' || myrows.dest_id || ' in mb/hour',
               'min(' || myrows.min_mb || '), ' || 'avg(' || myrows.avg_mb || '), ' || 'max(' || myrows.max_mb || ')');
      println2('Archivelog dest ' || myrows.dest_id || ' switches/hour',
               'min(' || myrows.min_swtch || '), ' || 'avg(' || myrows.avg_swtch || '), ' || 'max(' || myrows.max_swtch || ')');
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_files IS

  cursor mycur1 is
  SELECT lower(subset) || ' gb' name,
       round(bsize / 1024 / 1024 / 1024,
             2) value
        FROM   (SELECT tablespace_name subset,
               SUM(bytes) bsize
        FROM   dba_temp_files
        GROUP  BY tablespace_name
        UNION
        SELECT 'Application Tablespaces' subset,
               SUM(bytes) bsize
        FROM   dba_data_files
        WHERE  tablespace_name NOT IN ('SYSAUX',
                                       'SYSTEM')
               AND tablespace_name NOT IN (SELECT VALUE FROM v$parameter WHERE NAME = 'undo_tablespace')
        UNION
        SELECT tablespace_name subset,
               SUM(bytes) bsize
        FROM   dba_data_files
        WHERE  tablespace_name IN ('SYSAUX',
                                   'SYSTEM')
        GROUP  BY tablespace_name
        UNION
        SELECT tablespace_name subset,
               SUM(bytes) bsize
        FROM   dba_data_files
        WHERE  tablespace_name IN (SELECT VALUE FROM v$parameter WHERE NAME = 'undo_tablespace')
        GROUP  BY tablespace_name
        UNION
        SELECT 'Online Redo Logs' subset,
               SUM(bytes * members) bsize
        FROM   v$log)
;


  BEGIN
    println2(h1,
             '+- db tablespace footprint -+');

    SELECT (rlog.bytes + df.bytes + tf.bytes) / gb
    INTO   ntemp1
    FROM   (SELECT SUM(a.bytes) bytes
            FROM   v$log     a,
                   v$logfile b
            WHERE  a.group# = b.group#) rlog,
           (SELECT SUM(bytes) bytes FROM dba_data_files) df,
           (SELECT SUM(bytes) bytes FROM dba_temp_files) tf;

    println2('db disk space gb',
             to_char(ntemp1,
                     nf));

    SELECT SUM(bytes) / gb
    INTO   ntemp2
    FROM   dba_free_space
    WHERE  tablespace_name NOT IN ('SYSTEM',
                                   'SYSAUX')
           AND tablespace_name NOT IN (SELECT VALUE FROM gv$parameter WHERE NAME = 'undo_tablespace');

    println2('db free space gb',
             to_char(ntemp2,
                     nf));

    println2('db free space percentage',
             to_char((ntemp2 / ntemp1 * 100),
                     nf));

  --9i fix - if script  run against 9i this procedure will not abend
  print_vdynsql('SELECT ''control files'' subset, round(SUM(block_size * file_size_blks)/1024/1024/1024,2) bsize FROM v$controlfile');

     FOR myrows IN mycur1 LOOP
        println2(myrows.name,
                 myrows.value);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

  PROCEDURE db_segments IS
  BEGIN
    println2(h1,
             '+- db application segments -+');

    --select 'db_indexes_gb',to_char(sum(bytes)/gb,nf) into sname, result from dba_segments where segment_type like '%INDEX%' and owner not in (select schema from dba_registry); println2( sname, result);
    --select 'db_lob_data_gb', to_char(sum(bytes)/gb,nf) into sname, result from dba_segments where segment_type in ('LOB PARTITION','LOBSEGMENT') and owner not in (select schema from dba_registry); println2( sname, result);
    --select 'db_table_data_gb', to_char(sum(bytes)/gb,nf) into sname, result from dba_segments where segment_type like '%TABLE%' and owner not in (select schema from dba_registry); println2( sname, result);

    FOR myrows IN (SELECT DISTINCT segment_type
                   FROM   dba_segments
                   WHERE  segment_type NOT IN ('ROLLBACK',
                                               'TYPE2 UNDO')
                   ORDER  BY 1) LOOP
      SELECT lower(myrows.segment_type) || ' gb',
             nvl(to_char(SUM(bytes) / gb,
                         nf),
                 '0')
      INTO   sname,
             RESULT
      FROM   dba_segments
      WHERE  segment_type = myrows.segment_type
             AND owner IN (SELECT a.username
                           FROM   dba_users a,
                                  dba_users b
                           WHERE  a.created > (b.created + 1 / 24)
                                  AND b.username = 'SYS' &AgentFilter
                           MINUS
                           SELECT DISTINCT SCHEMA
                           FROM   dba_registry);
      println2(sname,
               RESULT);
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_registry_size IS
    cursor mycur1 is SELECT comp_name || ' (' || owner || ') gb' name,  SUM(bytes)/gb value FROM dba_segments s, dba_registry r WHERE s.owner = r.schema  AND r.schema != 'SYS' group by comp_name || ' (' || owner || ') gb';
  BEGIN
    println2(h1,
             '+- db registry segments -+');

    for rs in mycur1 LOOP
      println2(rs.name, to_char(rs.value,nf));
    end loop;

  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE asm IS
    /*    CURSOR mycur_1 IS
    SELECT NAME,
           'total_gb=' || to_char(round(total_mb / 1024)) || ' ' || 'used_gb=' ||
           to_char(round((total_mb - free_mb) / 1024)) || ' ' || 'free_gb=' || to_char(round(free_mb / 1024)) VALUE
    FROM   v$asm_diskgroup;*/

  BEGIN
    println2(h1,
             '+- ASM -+');

    print_vdynsql('SELECT NAME,
             '' total_gb = '' || to_char(round(total_mb / 1024)) || '' '' || ''
                  used_gb = '' ||
             to_char(round((total_mb - free_mb) / 1024)) || '' '' || ''
                  free_gb = '' || to_char(round(free_mb / 1024)) VALUE
      FROM   v$asm_diskgroup');

  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_rac IS

    CURSOR cur_nodes IS
      SELECT instance_name || '(' || host_name || ')' VALUE FROM gv$instance ORDER BY inst_id;

    snodes VARCHAR2(2000);

  BEGIN
    println2(h1,
             '+- RAC configuration -+');
    print_db_parameter('active_instance_count',
                       'FALSE',
                       'FALSE');
    print_db_parameter('cluster_database',
                       'FALSE',
                       'FALSE');
    print_db_parameter('cluster_database_instances',
                       'FALSE',
                       'FALSE');
    print_db_parameter('cluster_interconect',
                       'FALSE',
                       'FALSE');

    snodes := '';
    FOR myrows IN cur_nodes LOOP
      snodes := snodes || myrows.value || ' ';
    END LOOP;
    println2('RAC nodes',
             snodes);

  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_dg IS

  BEGIN
    println2(h1,
             '+- Data Guard configuration -+');
    print_db_parameter('archive_lag_target',
                       'FALSE',
                       'FALSE');
    print_db_parameter('control_file_record_keep_time',
                       'FALSE',
                       'FALSE');
    print_db_parameter('db_file_name_convert',
                       'FALSE',
                       'FALSE');
    print_db_parameter('db_unique_name',
                       'FALSE',
                       'FALSE');
    print_db_parameter('dg_broker%',
                       'FALSE',
                       'FALSE');
    print_db_parameter('fal%',
                       'FALSE',
                       'FALSE');
    print_db_parameter('log_archive%',
                       'FALSE',
                       'FALSE');
    print_db_parameter('log_file%',
                       'FALSE',
                       'FALSE');
    print_db_parameter('remote_login_passwordfile',
                       'FALSE',
                       'FALSE');
    print_db_parameter('standby_archive_dest',
                       'FALSE',
                       'FALSE');
    print_db_parameter('standby_file_management',
                       'FALSE',
                       'FALSE');

    print_vcol('Database Instance','INSTANCE', 'v$database');
    print_vcol('Database Role','DATABASE_ROLE', 'v$database');
    print_vcol('Database Unique Name','DB_UNIQUE_NAME', 'v$database');
    print_vcol('Dataguard Broker','dataguard_broker','v$database');
    print_vcol('Guard Status', 'guard_status', 'v$database');
    print_vcol('Open Mode','OPEN_MODE', 'v$database');
    print_vcol('Protection Level','PROTECTION_LEVEL', 'v$database');
    print_vcol('Protection Mode','PROTECTION_MODE', 'v$database');
    print_vcol('Switchover Status','SWITCHOVER_STATUS', 'v$database');

  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_logical_standby IS

    CURSOR mycur1 IS
      SELECT COUNT(*) VALUE FROM dba_logstdby_not_unique WHERE bad_column = 'Y';

    /*    CURSOR mycur2 IS
    SELECT nvl(attributes,
               data_type) NAME,
           COUNT(*) VALUE
    FROM   dba_logstdby_unsupported
    GROUP  BY nvl(attributes,
                  data_type)
    ORDER  BY 1;*/

    CURSOR mycur2 IS
      SELECT data_type NAME,
             COUNT(*) VALUE
      FROM   dba_logstdby_unsupported
      GROUP  BY data_type
      ORDER  BY 1;

  BEGIN
    println2(h1,
             '+- Logical Standby Readiness Assessment -+');

    println2('-',
             'DBA_LOGSTDBY_NOT_UNIQUE');
    FOR myrows IN mycur1 LOOP
      println2('Bad Columns',
               myrows.value);
    END LOOP;

    println2('-',
             'DBA_LOGSTDBY_UNSUPPORTED');
    FOR myrows IN mycur2 LOOP
      println2(myrows.name,
               myrows.value);
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_transport_tablespace IS

    CURSOR mycur1 IS
      SELECT data_type NAME,
             to_char(VALUE) || ' --' || decode(data_type,
                                               'XMLTYPE',
                                               '10gR2 EXP/IMP, 11.1+ Datapump',
                                               'BINARY_FLOAT',
                                               'Data Pump',
                                               'BINARY_DOUBLE',
                                               'Data Pump',
                                               'Check target TZ file version') VALUE
      FROM   (SELECT data_type,
                     COUNT(*) VALUE
              FROM   (SELECT DISTINCT o.object_id,
                                      c.data_type
                      FROM   dba_tab_cols c,
                             dba_objects  o
                      WHERE  (c.data_type LIKE '%WITH TIME ZONE' OR
                             c.data_type IN ('XMLTYPE',
                                              'BINARY_FLOAT',
                                              'BINARY_DOUBLE'))
                             AND c.owner = o.owner
                             AND c.table_name = o.object_name
                             AND o.object_type = 'TABLE'
                      GROUP  BY o.object_id,
                                c.data_type)
              GROUP  BY data_type
              ORDER  BY 1);

  BEGIN
    println2(h1,
             '+- Transportable Tablespace Readiness Assessment -+');

    print_vcol('SUM(tablespace_names)',
               'sum(length(tablespace_name))',
               'dba_tablespaces where contents not in (''UNDO'',''TEMPORARY'')');
    print_vcol('Spatial Indexes',
               'to_char(count(*)) || '' --need drop before EXP''',
               'dba_indexes where ityp_name like ''%SPATIAL_INDEX''');

   print_vcol('Recycle Bin gb',
              'round(sum(space)/1024/1024/1024,2) || '' ('' || count(*) || '' objects )''',
              'dba_recyclebin');

    FOR myrows IN mycur1 LOOP
      println2('data-type: ' || myrows.name,
               myrows.value);
    END LOOP;

  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_xdb IS

  BEGIN
    println2(h1,
             '+- XDB configuration -+');
    print_db_parameter('dispatchers',
                       'FALSE',
                       'FALSE');
    print_db_parameter('shared_servers',
                       'FALSE',
                       'FALSE');

    print_vcol('XDB FTP Port',
               'to_char(dbms_xdb.getftpport)',
               'dual');
    print_vcol('XDB HTTP Port',
               'to_char(dbms_xdb.gethttpport)',
               'dual');
    print_vcol('XDB Tablespace',
               'DBMS_XDB.GETXDB_TABLESPACE',
               'dual');

    --resource_view does not exist if XDB not installed
    print_vcol('XDB User Resources Guess',
               'to_char(count(*))',
               'resource_view WHERE substr(any_path, 1, instr(any_path, ''/'', 2)) NOT IN (''/sys/'', ''/images/'', ''/xds/'', ''/olap_data_security/'', ''/OLAP_XDS/'')');

    /*
    This package does not exist in 10.2
        BEGIN
          dbms_xdb.getlistenerendpoint(dbms_xdb.xdb_endpoint_http, host, port, protocol);
          dbms_xdb.getlistenerendpoint(dbms_xdb.xdb_endpoint_http, host, port, protocol);
          println2('XDB Endpoint 1', 'Host=' || host || ' Port=' || port || ' Protocol=' || protocol);
          dbms_xdb.getlistenerendpoint(dbms_xdb.xdb_endpoint_http2, host, port, protocol);
          println2('XDB Endpoint 2', 'Host=' || host || ' Port=' || port || ' Protocol=' || protocol);
        EXCEPTION
          WHEN OTHERS THEN
            NULL;
        END;
    */
  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_streams IS

    CURSOR cur_capture IS
      SELECT capture_name || '( ' || queue_owner || '.' || queue_name || ')' VALUE FROM dba_capture;
    CURSOR cur_apply IS
      SELECT apply_name || '( ' || queue_owner || '.' || queue_name || ')' VALUE FROM dba_apply;
  BEGIN
    println2(h1,
             '+- Streams configuration -+');
    print_db_parameter('compatible',
                       'FALSE',
                       'FALSE');
    print_db_parameter('global_names',
                       'FALSE',
                       'FALSE');
    print_db_parameter('open_links',
                       'FALSE',
                       'FALSE');
    print_db_parameter('remote_archive_enable',
                       'FALSE',
                       'FALSE');
    print_db_parameter('sga_target',
                       'FALSE',
                       'FALSE');
    print_db_parameter('streams_pool_size',
                       'FALSE',
                       'FALSE');
    print_db_parameter('log_buffer',
                       'FALSE',
                       'FALSE');

    print_vcol('CDC-Source tables',
               'count(*)',
               'dba_source_tables');
    print_vcol('CDC-Change tables',
               'count(*)',
               'all_change_tables');
    print_vcol('CDC-Subscriptions',
               'count(*)',
               'dba_subscriptions');
    print_vcol('CDC-Subscribed Tables',
               'count(*)',
               'dba_subscribed_tables');

    FOR myrows IN cur_capture LOOP
      println2('streams capture',
               myrows.value);
    END LOOP;
    FOR myrows IN cur_apply LOOP
      println2('streams apply',
               myrows.value);
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_workflow IS
    CURSOR mycur IS
      SELECT COUNT(*) RESULT
      FROM   dba_tables
      WHERE  table_name IN ('WF_ACTIVITIES',
                            'WF_ACTIVITY_ATTR_VALUES',
                            'WF_ACTIVITY_ATTRIBUTES',
                            'WF_ACTIVITY_TRANSITIONS',
                            'WF_ITEM_ACTIVITY_STATUSES',
                            'WF_ITEM_ACTIVITY_STATUSES_H',
                            'WF_ITEM_ATTRIBUTES',
                            'WF_ITEM_TYPES',
                            'WF_ITEMS',
                            'WF_MESSAGE_ATTRIBUTES',
                            'WF_MESSAGES',
                            'WF_NOTIFICATION_ATTRIBUTES',
                            'WF_NOTIFICATIONS',
                            'WF_PROCESS_ACTIVITIES');
  BEGIN
    println2(h1,
             '+- Workflow configuration -+');

    FOR myrows IN mycur LOOP
      println2('Looking for 13 tables, found',
               myrows.result);
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_workspace IS
  BEGIN
    println2(h1,'+- Workspace manager -+');
    print_vdynsql('select name, value from wm_installation');
    print_vdynsql('select ''workspace'', owner||''.''||workspace from dba_workspaces order by 1');
    print_vdynsql('select owner || state, count(*) from DBA_WM_VERSIONED_TABLES group by owner, state order by 1');
  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;


  PROCEDURE db_security IS
    --'AUD$', 'CDB_UNIFIED_AUDIT_TRAIL', 'FGA_LOG$', 'UNIFIED_AUDIT_TRAIL'

    CURSOR mycur1 IS
      SELECT owner || '.' || segment_name value1,
             tablespace_name || '[' || to_char(round(SUM(bytes) / 1024 / 1024,
                                                     2)) || 'mb]' value2
      FROM   dba_extents
      WHERE  owner IN ('SYS',
                       'SYSTEM')
             AND segment_name IN ('AUD$',
                                  'FGA_LOG$')
      GROUP  BY owner || '.' || segment_name,
                tablespace_name;

    CURSOR mycur2 IS
      SELECT owner || '.' || table_name value1
      FROM   dba_tables
      WHERE  owner IN ('SYS',
                       'SYSTEM')
             AND table_name IN ('AUD$',
                                'FGA_LOG$');

  BEGIN
    println2(h1,
             '+- Security configuration -+');

    --audit log size
    FOR myrows IN mycur1 LOOP
      println2(myrows.value1 || ' tablespace',
               myrows.value2);
    END LOOP;
    --audit logs owner
    FOR myrows IN mycur2 LOOP
      print_vcol(myrows.value1 || ' null dbid count',
                 'count(*)',
                 myrows.value1 || ' where dbid is null');
    END LOOP;
    --db vault
    print_vcol('Oracle Database Vault',
               'decode(value,''TRUE'',''is installed'',''is not installed'')',
               'v$option WHERE parameter = ''Oracle Database Vault''');
    print_vcol('Backup Encryption',
               'decode(value,''TRUE'',''is installed'',''is not installed'')',
               'v$option WHERE parameter = ''Backup Encryption''');
    print_vcol('Transparent Data Encryption',
               'decode(value,''TRUE'',''is installed'',''is not installed'')',
               'v$option WHERE parameter = ''Transparent Data Encryption''');
    print_vcol('Oracle Label Security',
               'decode(value,''TRUE'',''is installed'',''is not installed'')',
               'v$option WHERE parameter =''Oracle Label Security''');

    --audit vault agent
    print_vcol('Audit Vault Agent',
               'owner',
               'dba_procedures where object_name = ''AV_TRUNCATE_CLOB'' and object_type = ''FUNCTION''');
    print_vcol('dbms_audit_mgmt installed',
               '''Yes''',
               'dba_objects where object_name = ''DBMS_AUDIT_MGMT'' and object_type = ''PACKAGE''');
    --Encrypted objects
    print_vcol('Encrypted Columns',
               'count(*)',
               'dba_encrypted_columns');
    print_vcol('Encryption wallets',
               'count(*)',
               'v$encryption_wallet');
    print_vcol('Encrypted Tablespace (11g+)',
               'count(*)',
               'dba_tablespaces where encrypted = ''YES''');
    print_vcol('Compressed tablespaces',
               'count(*)',
               'dba_tablespaces where def_tab_compression <> ''DISABLED''');
    print_vcol('Encrypted Backups ',
               'count(*)',
               'V$TABLESPACE where ENCRYPT_IN_BACKUP = ''YES''');

  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

  PROCEDURE db_ogg IS
    --AT=application_table

    PROCEDURE at_nolog_table_count IS
      CURSOR mycur IS
        SELECT COUNT(*) VALUE
        FROM   dba_tables      a,
               dba_tablespaces b
        WHERE  a.tablespace_name = b.tablespace_name
               AND a.logging = 'NO'
               AND b.logging = 'NOLOGGING'
        GROUP  BY a.owner;

    BEGIN

      FOR myrows IN mycur LOOP
        println2('No logging count',
                 myrows.value);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_count IS

      CURSOR mycur IS
        SELECT COUNT(*) VALUE
        FROM   dba_tables,
               (SELECT DISTINCT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  owner = b.username;

    BEGIN

      FOR myrows IN mycur LOOP
        println2('Application tables',
                 myrows.value);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_pkuk_missing_count IS

      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   (SELECT owner,
                       table_name
                FROM   dba_tables,
                       (SELECT a.username
                        FROM   dba_users a,
                               dba_users b
                        WHERE  a.created > (b.created + 1 / 24)
                               AND b.username = 'SYS' &AgentFilter
                        MINUS
                        SELECT DISTINCT SCHEMA
                        FROM   dba_registry) b
                WHERE  owner = b.username
                MINUS
                SELECT owner,
                       table_name
                FROM   dba_constraints,
                       (SELECT a.username
                        FROM   dba_users a,
                               dba_users b
                        WHERE  a.created > (b.created + 1 / 24)
                               AND b.username = 'SYS' &AgentFilter
                        MINUS
                        SELECT DISTINCT SCHEMA
                        FROM   dba_registry) b
                WHERE  owner = b.username
                       AND constraint_type IN ('P',
                                               'U')
                MINUS
                SELECT owner,
                       table_name
                FROM   dba_external_tables) b;

    BEGIN

      FOR myrows IN mycur LOOP
        println2('PKUK missing',
                 myrows.result);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_pk_novalidate_count IS

      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   dba_constraints,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  owner = b.username
               AND constraint_type = 'P'
               AND validated = 'NOT VALIDATED';

    BEGIN

      FOR myrows IN mycur LOOP
        println2('PK novalidate',
                 myrows.result);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_pkukfk_invalid_count IS

      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   (SELECT owner,
                       table_name
                FROM   dba_constraints,
                       (SELECT a.username
                        FROM   dba_users a,
                               dba_users b
                        WHERE  a.created > (b.created + 1 / 24)
                               AND b.username = 'SYS' &AgentFilter
                        MINUS
                        SELECT DISTINCT SCHEMA
                        FROM   dba_registry) b
                WHERE  owner = b.username
                       AND constraint_type IN ('P',
                                               'U',
                                               'R')
                       AND (invalid = 'INVALID'));

    BEGIN

      FOR myrows IN mycur LOOP
        println2('PKUKFK invalid',
                 myrows.result);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_unused_col_tab_normal_count IS

      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   dba_unused_col_tabs a,
               dba_tables b,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) c
        WHERE  a.owner = c.username
               AND a.owner = b.owner
               AND a.table_name = b.table_name
               AND b.partitioned = 'NO';

    BEGIN

      FOR myrows IN mycur LOOP
        println2('Unused columns - normal tables',
                 myrows.result);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_hidden_column_count IS

      CURSOR mycur IS
          select count(*) result from dba_tab_cols a,
                       (SELECT a.username
                        FROM   dba_users a,
                               dba_users b
                        WHERE  a.created > (b.created + 1 / 24)
                               AND b.username = 'SYS' &AgentFilter
                        MINUS
                        SELECT DISTINCT SCHEMA
                        FROM   dba_registry) b
                WHERE  owner = b.username
                and a.hidden_column = 'YES';

    BEGIN

      FOR myrows IN mycur LOOP
        println2('Hidden Columns',
                 myrows.result);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_unused_col_tab_part_count IS

      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   dba_unused_col_tabs a,
               dba_tables b,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) c
        WHERE  a.owner = c.username
               AND a.owner = b.owner
               AND a.table_name = b.table_name
               AND b.partitioned = 'YES';

    BEGIN

      FOR myrows IN mycur LOOP
        println2('Unused columns - partitioned tables',
                 myrows.result);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;


    PROCEDURE at_unsup_data_type_count IS

      CURSOR mycur IS
        SELECT data_type,
               COUNT(*) RESULT
        FROM   dba_tab_cols,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  owner = b.username
               AND (data_type IN ('ANYDATA',
                                  'ANYDATASET',
                                  'ANYTYPE',
                                  'BFILE',
                                  'BINARY_INTEGER',
                                  'MLSLABEL',
                                  'ORDDICOM',
                                  'PLS_INTEGER',
                                  'TIMEZONE_ABBR',
                                  'TIMEZONE_REGION',
                                  'URITYPE',
                                  'UROWID') OR data_type LIKE 'INTERVAL%')
        GROUP  BY data_type
        ORDER  BY 1,
                  2;

      bflag CHAR(1) := 'a';
    BEGIN
      FOR myrows IN mycur LOOP
        println2(myrows.data_type,
                 myrows.result);
        bflag := 'z';
      END LOOP;

      IF (bflag = 'a')
      THEN
        println2('Data-types not supported',
                 '0');
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_compression_count IS
      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   dba_tables t,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  t.compression = 'ENABLED'
               AND t.owner = b.username;

    BEGIN
      FOR myrows IN mycur LOOP
        println2('Compressed tables',
                 myrows.result);

      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_rowid_count IS
      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   dba_tab_cols
        WHERE  owner IN (SELECT a.username
                         FROM   dba_users a,
                                dba_users b
                         WHERE  a.created > (b.created + 1 / 24)
                                AND b.username = 'SYS' &AgentFilter
                         MINUS
                         SELECT DISTINCT SCHEMA
                         FROM   dba_registry)
               AND data_type = 'ROWID'
               and table_name != 'CHAINED_ROWS';

    BEGIN
      FOR myrows IN mycur LOOP
        println2('ROWID tables',
                 myrows.result);

      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_one_col_non_scalar_count IS
      CURSOR mycur IS
        SELECT a.data_type,
               COUNT(*) VALUE
        FROM   dba_tab_cols a,
               (SELECT owner,
                       table_name
                FROM   dba_tab_cols,
                       (SELECT a.username
                        FROM   dba_users a,
                               dba_users b
                        WHERE  a.created > (b.created + 1 / 24)
                               AND b.username = 'SYS' &AgentFilter
                        MINUS
                        SELECT DISTINCT SCHEMA
                        FROM   dba_registry) b
                WHERE  owner = b.username
                       AND table_name NOT LIKE 'BIN$%'
                GROUP  BY owner,
                          table_name
                HAVING MAX(column_id) = 1) b
        WHERE  data_type NOT IN ('NUMBER',
                                 'FLOAT',
                                 'CHAR',
                                 'DATE',
                                 'NCHAR',
                                 'VARCHAR2',
                                 'NVARCHAR2')
               AND b.table_name = a.table_name
               AND b.owner = a.owner
        GROUP  BY a.data_type
        ORDER  BY 1;

    BEGIN
      FOR myrows IN mycur LOOP
        println2('One column table: ' || myrows.data_type,
                 myrows.value);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_external_count IS
      CURSOR mycur IS
        SELECT COUNT(*) RESULT FROM dba_external_tables a,(SELECT a.username
                        FROM   dba_users a,
                               dba_users b
                        WHERE  a.created > (b.created + 1 / 24)
                               AND b.username = 'SYS' &AgentFilter
                        MINUS
                        SELECT DISTINCT SCHEMA
                        FROM   dba_registry) b
                        where a.owner = b.username;

    BEGIN
      FOR myrows IN mycur LOOP
        println2('External tables',
                 myrows.result);

      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_udt_count IS
      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   dba_types,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  owner = b.username;

    BEGIN
      FOR myrows IN mycur LOOP
        println2('User defined types',
                 myrows.result);

      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_mv_count IS
      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   dba_mviews,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  owner = b.username;

    BEGIN
      FOR myrows IN mycur LOOP
        println2('Materialised Views',
                 myrows.result);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_xmltype_table_count IS
    BEGIN
      print_vcol('XMLTYPE tables',
                 'count(*)',
                 'dba_xml_tables, (SELECT a.username FROM   dba_users a, dba_users b WHERE  a.created > (b.created + 1 / 24) AND b.username = ''SYS'' MINUS SELECT DISTINCT SCHEMA FROM   dba_registry) b WHERE  owner = b.username');
    END;

    PROCEDURE at_trigger_count IS
      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   dba_triggers,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  owner = b.username;

    BEGIN
      FOR myrows IN mycur LOOP
        println2('Triggers',
                 myrows.result);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_sequence_count IS
      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   dba_sequences,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  sequence_owner = b.username;

    BEGIN
      FOR myrows IN mycur LOOP
        println2('Sequences',
                 myrows.result);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE at_nopkuk_33plus_cols IS
      CURSOR mycur IS
        SELECT COUNT(*) RESULT
        FROM   (SELECT DISTINCT owner,
                                table_name
                FROM   dba_tab_cols,
                       (SELECT a.username
                        FROM   dba_users a,
                               dba_users b
                        WHERE  a.created > (b.created + 1 / 24)
                               AND b.username = 'SYS' &AgentFilter
                        MINUS
                        SELECT DISTINCT SCHEMA
                        FROM   dba_registry) b
                WHERE  column_id >= 33
                       AND owner = b.username
                INTERSECT -- the intersection of schema tables with > 33 columns and tables with no pkuk
                 (SELECT owner,
                        table_name
                 FROM   dba_tables,
                        (SELECT a.username
                         FROM   dba_users a,
                                dba_users b
                         WHERE  a.created > (b.created + 1 / 24)
                                AND b.username = 'SYS' &AgentFilter
                         MINUS
                         SELECT DISTINCT SCHEMA
                         FROM   dba_registry) b
                 WHERE  owner = b.username
                 MINUS
                 SELECT owner,
                        table_name
                 FROM   dba_constraints,
                        (SELECT a.username
                         FROM   dba_users a,
                                dba_users b
                         WHERE  a.created > (b.created + 1 / 24)
                                AND b.username = 'SYS' &AgentFilter
                         MINUS
                         SELECT DISTINCT SCHEMA
                         FROM   dba_registry) b
                 WHERE  owner = b.username
                        AND constraint_type IN ('P',
                                                'U')
                 MINUS
                 SELECT owner,
                        table_name
                 FROM   dba_external_tables));

    BEGIN
      FOR myrows IN mycur LOOP
        println2('Table with 33+ Columns',
                 myrows.result);
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        println2('Caught Exception',
                 SQLERRM);
    END;

    PROCEDURE segment_gb IS
      TYPE longname IS TABLE OF NUMBER INDEX BY VARCHAR2(256);
      segment_size longname;
      RESULT       NUMBER;

      CURSOR mycur_segment_size IS
        SELECT owner || '.' || segment_name SEGMENT,
               SUM(bytes) total_bytes
        FROM   dba_segments a,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  a.owner = b.username
        GROUP  BY owner || '.' || segment_name;

      CURSOR mycur_at_pkuk_missing IS
        SELECT owner || '.' || table_name SEGMENT
        FROM   (SELECT owner,
                       table_name
                FROM   dba_tables a,
                       (SELECT a.username
                        FROM   dba_users a,
                               dba_users b
                        WHERE  a.created > (b.created + 1 / 24)
                               AND b.username = 'SYS' &AgentFilter
                        MINUS
                        SELECT DISTINCT SCHEMA
                        FROM   dba_registry) b
                WHERE  a.owner = b.username
                MINUS
                SELECT owner,
                       table_name
                FROM   dba_constraints,
                       (SELECT a.username
                        FROM   dba_users a,
                               dba_users b
                        WHERE  a.created > (b.created + 1 / 24)
                               AND b.username = 'SYS' &AgentFilter
                        MINUS
                        SELECT DISTINCT SCHEMA
                        FROM   dba_registry) b
                WHERE  owner = b.username
                       AND constraint_type IN ('P',
                                               'U')
                MINUS
                SELECT owner,
                       table_name
                FROM   dba_external_tables);

      CURSOR mycur_at_unsup_data_type_gb IS
        SELECT owner || '.' || table_name SEGMENT
        FROM   dba_tab_cols a,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  a.owner = b.username
               AND (a.data_type IN ('ANYDATA',
                                    'ANYDATASET',
                                    'ANYTYPE',
                                    'BFILE',
                                    'BINARY_INTEGER',
                                    'MLSLABEL',
                                    'ORDDICOM',
                                    'PLS_INTEGER',
                                    'TIMEZONE_ABBR',
                                    'TIMEZONE_REGION',
                                    'URITYPE',
                                    'UROWID') OR a.data_type LIKE 'INTERVAL%');

      CURSOR mycur_at_compression_gb IS
        SELECT owner || '.' || table_name SEGMENT
        FROM   dba_tables a,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  a.compression = 'ENABLED'
               AND a.owner = b.username;

      /*
        09/03/2016 09:57:26 mlh excluded for now - this fails if XDB is not installed

            CURSOR mycur_at_xmltype_table_gb IS
              SELECT owner || '.' || table_name SEGMENT
              FROM   dba_xml_tables a,
                     (SELECT a.username
                      FROM   dba_users a,
                             dba_users b
                      WHERE  a.created > (b.created + 1 / 24)
                             AND b.username = 'SYS' &AgentFilter
                      MINUS
                      SELECT DISTINCT SCHEMA
                      FROM   dba_registry) b
              WHERE  a.owner = b.username;
      */

      CURSOR mycur_at_rowid_gb IS
        SELECT DISTINCT owner || '.' || table_name SEGMENT
        FROM   dba_tab_cols,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  owner = b.username
               AND (data_type = 'ROWID');

      CURSOR mycur_at_one_col_non_scalar_gb IS
        SELECT owner || '.' || table_name SEGMENT
        FROM   dba_tab_cols,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) b
        WHERE  data_type NOT IN ('CHAR',
                                 'DATE',
                                 'DECIMAL',
                                 'DOUBLE PRECISION',
                                 'FLOAT',
                                 'FLOAT',
                                 'INTEGER',
                                 'NCHAR',
                                 'NUMBER',
                                 'NUMBER',
                                 'NVARCHAR2',
                                 'RAW',
                                 'REAL',
                                 'VARCHAR2')
               AND owner = b.username
               AND table_name NOT LIKE 'BIN$%'
        GROUP  BY owner,
                  table_name
        HAVING MAX(column_id) = 1;

      CURSOR mycur_at_udt_gb IS
        SELECT DISTINCT a.owner || '.' || a.table_name SEGMENT
        FROM   dba_tab_cols a,
               dba_types b,
               (SELECT a.username
                FROM   dba_users a,
                       dba_users b
                WHERE  a.created > (b.created + 1 / 24)
                       AND b.username = 'SYS' &AgentFilter
                MINUS
                SELECT DISTINCT SCHEMA
                FROM   dba_registry) c
        WHERE  a.data_type = b.type_name
               AND b.owner = c.username
               AND a.owner = c.username;

      CURSOR mycur_at_nolog_table_gb IS
        SELECT DISTINCT owner || '.' || table_name SEGMENT
        FROM   dba_tables      a,
               dba_tablespaces b
        WHERE  a.tablespace_name = b.tablespace_name
               AND a.logging = 'NO'
               AND b.logging = 'NOLOGGING';

      t1_start DATE;

    BEGIN

      t1_start := SYSDATE;
      FOR myrows IN mycur_segment_size LOOP
        segment_size(myrows.segment) := myrows.total_bytes;
      END LOOP;
      println2('@Elapsed Seconds to INIT ',
               round((SYSDATE - t1_start) * 86400,
                     4));

      t1_start := SYSDATE;
      RESULT   := 0;
      FOR myrows IN mycur_at_compression_gb LOOP
        BEGIN
          RESULT := RESULT + segment_size(myrows.segment);
        EXCEPTION
          WHEN OTHERS THEN
            --exception can occur when a schema.table does not have a segment, so catch and ignore because segment size = 0
            NULL;
        END;
      END LOOP;
      println2('Compressed gb',
               TRIM(to_char(RESULT / gb,
                            nf)) || ' @Elapsed Seconds ' || round((SYSDATE - t1_start) * 86400,
                                                                  4));

      t1_start := SYSDATE;
      RESULT   := 0;
      FOR myrows IN mycur_at_nolog_table_gb LOOP
        BEGIN
          RESULT := RESULT + segment_size(myrows.segment);
        EXCEPTION
          WHEN OTHERS THEN
            --exception can occur when a schema.table does not have a segment, so catch and ignore because segment size = 0
            NULL;
        END;
      END LOOP;
      println2('Non log tables [ts+tab] gb',
               TRIM(to_char(RESULT / gb,
                            nf)) || ' @Elapsed Seconds ' || round((SYSDATE - t1_start) * 86400,
                                                                  4));

      RESULT := 0;
      FOR myrows IN mycur_at_one_col_non_scalar_gb LOOP
        BEGIN
          RESULT := RESULT + segment_size(myrows.segment);
        EXCEPTION
          WHEN OTHERS THEN
            --exception can occur when a schema.table does not have a segment, so catch and ignore because segment size = 0
            NULL;
        END;
      END LOOP;
      println2('One column non-scalar gb',
               TRIM(to_char(RESULT / gb,
                            nf)) || ' @Elapsed Seconds ' || round((SYSDATE - t1_start) * 86400,
                                                                  4));

      t1_start := SYSDATE;
      RESULT   := 0;
      FOR myrows IN mycur_at_pkuk_missing LOOP
        BEGIN
          RESULT := RESULT + segment_size(myrows.segment);
        EXCEPTION
          WHEN OTHERS THEN
            --exception can occur when a schema.table does not have a segment, so catch and ignore because segment size = 0
            NULL;
        END;
      END LOOP;
      println2('PKUK missing gb',
               TRIM(to_char(RESULT / gb,
                            nf)) || ' @Elapsed Seconds ' || round((SYSDATE - t1_start) * 86400,
                                                                  4));

      t1_start := SYSDATE;
      RESULT   := 0;
      FOR myrows IN mycur_at_rowid_gb LOOP
        BEGIN
          RESULT := RESULT + segment_size(myrows.segment);
        EXCEPTION
          WHEN OTHERS THEN
            --exception can occur when a schema.table does not have a segment, so catch and ignore because segment size = 0
            NULL;
        END;
      END LOOP;
      println2('ROWID gb',
               TRIM(to_char(RESULT / gb,
                            nf)) || ' @Elapsed Seconds ' || round((SYSDATE - t1_start) * 86400,
                                                                  4));

      t1_start := SYSDATE;
      RESULT   := 0;
      FOR myrows IN mycur_at_udt_gb LOOP
        BEGIN
          RESULT := RESULT + segment_size(myrows.segment);
        EXCEPTION
          WHEN OTHERS THEN
            --exception can occur when a schema.table does not have a segment, so catch and ignore because segment size = 0
            NULL;
        END;
      END LOOP;
      println2('UDT gb',
               TRIM(to_char(RESULT / gb,
                            nf)) || ' @Elapsed Seconds ' || round((SYSDATE - t1_start) * 86400,
                                                                  4));

      t1_start := SYSDATE;
      RESULT   := 0;
      FOR myrows IN mycur_at_unsup_data_type_gb LOOP
        BEGIN
          RESULT := RESULT + segment_size(myrows.segment);
        EXCEPTION
          WHEN OTHERS THEN
            --exception can occur when a schema.table does not have a segment, so catch and ignore because segment size = 0
            NULL;
        END;
      END LOOP;
      println2('Unsupported data-type gb',
               TRIM(to_char(RESULT / gb,
                            nf)) || ' @Elapsed Seconds ' || round((SYSDATE - t1_start) * 86400,
                                                                  4));

      /*
      09/03/2016 09:58:49 mlh excluded - cursor fails if XDB not installed

            t1_start := SYSDATE;
            RESULT   := 0;
            FOR myrows IN mycur_at_xmltype_table_gb LOOP
              BEGIN
                RESULT := RESULT + segment_size(myrows.segment);
              EXCEPTION
                WHEN OTHERS THEN
                  --exception can occur when a schema.table does not have a segment, so catch and ignore because segment size = 0
                  NULL;
              END;
            END LOOP;
            println2('XMLTYPE table gb', TRIM(to_char(RESULT / gb, nf)) || ' @Elapsed Seconds ' ||
                      round((SYSDATE - t1_start) * 86400, 4));
      */

    END;
  BEGIN
    println2(h1,
             '+- GoldenGate high level review-+');

    print_db_parameter('enable_goldengate_replication',
                       'FALSE',
                       'FALSE');
    --Application Table - counts
    at_count;
    at_compression_count;
    at_external_count;
    at_mv_count;
    at_nolog_table_count;
    at_nopkuk_33plus_cols;
    at_one_col_non_scalar_count;
    at_pkukfk_invalid_count;
    at_pk_novalidate_count;
    at_unused_col_tab_normal_count;
    at_unused_col_tab_part_count;
    at_hidden_column_count;
    at_rowid_count;
    at_sequence_count;
    at_trigger_count;
    at_udt_count;
    at_unsup_data_type_count;
    at_xmltype_table_count;

    --Application Table - gigabytes
    IF (skip = 0)
    THEN
      segment_gb;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      println2('Caught Exception',
               SQLERRM);
  END;

BEGIN
  --SQL executed immediate to handle legacy database versions that do not support specific queries, mostly affecting: 8i, 9i
  t1_start := SYSDATE;

  print_start();

  --println2('Parameter', 'Value');

  t2_start := SYSDATE;
  db;
  println2('@Elapsed Seconds',
           round((SYSDATE - t2_start) * 86400,
                 4));

  t2_start := SYSDATE;
  db_characters;
  println2('@Elapsed Seconds',
           round((SYSDATE - t2_start) * 86400,
                 4));

  t2_start := SYSDATE;
  db_files;
  println2('@Elapsed Seconds',
           round((SYSDATE - t2_start) * 86400,
                 4));

  t2_start := SYSDATE;
  db_segments;
  println2('@Elapsed Seconds',
           round((SYSDATE - t2_start) * 86400,
                 4));

  t2_start := SYSDATE;
  db_registry_size;
  println2('@Elapsed Seconds',
           round((SYSDATE - t2_start) * 86400,
                 4));

  t2_start := SYSDATE;
  asm;
  println2('@Elapsed Seconds',
           round((SYSDATE - t2_start) * 86400,
                 4));

  t2_start := SYSDATE;
  cdb;
  println2('@Elapsed Seconds',
           round((SYSDATE - t2_start) * 86400,
                 4));

  t2_start := SYSDATE;
  db_logging;
  println2('@Elapsed Seconds',
           round((SYSDATE - t2_start) * 86400,
                 4));

  t2_start := SYSDATE;
  db_security;
  println2('@Elapsed Seconds',
           round((SYSDATE - t2_start) * 86400,
                 4));

  t2_start := SYSDATE;
  db_rac;
  println2('@Elapsed Seconds',
           round((SYSDATE - t2_start) * 86400,
                 4));

  t2_start := SYSDATE;
  db_dg;
  println2('@Elapsed Seconds',
           round((SYSDATE - t2_start) * 86400,
                 4));

  t1_stop := SYSDATE;

  --println2(h1, h1);
  println2(h2,
           h2);
  println2('@Elapsed run time',
           to_char(t1_start,
                   'dd-mon-yyyy hh24:mi:ss') || ' -> ' ||
           to_char(t1_stop,
                   'hh24:mi:ss') || ', ' || to_char(round((t1_stop - t1_start) * 86400,
                                                          4)) || ' seconds');
  println2(h2,
           h2);

  print_stop();
EXCEPTION
  WHEN OTHERS THEN
    println2('Caught Exception',
             SQLERRM);
END;
/


set markup HTML ON

prompt

prompt <a href="#z-header">Back to Top</a>
prompt <h2 id="And_finally.">And finally.</h2>

set timing off

prompt
prompt This is the end of the document.  The generation runtime for this report is usually determined by the number of database objects and to some extent the volume of data.  However, sometimes, after adding some new code, the runtime increases.  Having a collection of runtimes from a large range of databases helps me keep track areas of unreasonable performance, which is why the final table exists below.
prompt

select
  '&time_start' "Report Start Time",
  to_char(sysdate,'dd-mon-yyyy hh24:mi:ss') "Report End Time",
  round(1440 * (sysdate - to_date('&time_start','dd-mon-yyyy hh24:mi:ss')),2) "Report Elapsed Minutes",
  (select round(sum(bytes)/1024/1024/1024,2) from dba_data_files) "Database Size GB",
  (select count(*) from dba_objects) "Database Object Count",
  '&1, &2, &3' "Schema Filter"
from dual;

prompt
prompt <a href="#z-header">Back to Top</a>

set markup HTML OFF
set define OFF

--The prompt removes trailing semicolon characters
prompt <script>

prompt var cssRules = [
prompt { selector: '.TT b          ', rules: 'font-family:Trebuchet MS,Arial,Helvetica,sans-serif;color:red;' },
prompt { selector: '.TT caption    ', rules: 'font-size:1em;color:#004000; caption-side: top;' },
prompt { selector: '.TT table      ', rules: 'table-layout:auto;' },
prompt { selector: '.TT td         ', rules: 'font-size:.7em;border:1px solid #98bf21;padding:3px 7px 2px;background-color:#F1F1F1;' },
prompt { selector: '.TT th         ', rules: 'font-size:1em;text-align:left;padding-top:5px;padding-bottom:4px;background-color:#A7C942;color:#000;' },
prompt { selector: '.TT            ', rules: 'caption-side: bottom; flex-wrap: nowrap; font-family:Trebuchet MS,Arial,Helvetica,sans-serif;' },
prompt { selector: '.button        ', rules: 'background-color: #336699; border: none; color: white; padding: 1px 5px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 2px;' },
prompt { selector: '.cell-left     ', rules: 'display: table-cell; width: 50%;font-size:.7em;border:1px solid #98bf21;padding:3px 7px 2px;background-color:#F1F1F1;' },
prompt { selector: '.cell-right    ', rules: 'display: table-cell; nowrap; width: 50%;font-size:.7em;border:1px solid #98bf21;padding:3px 7px 2px;background-color:#F1F1F1;' },
prompt { selector: '.close         ', rules: 'color: white; float: right; font-size: 28px; font-weight: bold;'},
prompt { selector: '.close:hover   ', rules: 'color: #000; text-decoration: none; cursor: pointer;'},
prompt { selector: '.close:focus   ', rules: 'color: #000; text-decoration: none; cursor: pointer;'},
prompt { selector: '.column-center ', rules: 'width=33%; padding: 4px;' },
prompt { selector: '.column-left   ', rules: 'float: left; width=33%;  padding: 4px;' },
prompt { selector: '.column-right  ', rules: 'float: right; width=33%; padding: 4px;' },
prompt { selector: '.modal         ', rules: 'display: none; position: fixed; z-index: 1; padding-top: 100px; left: 0; top: 0; width:0 ; height: 100%; width: 100%; overflow: auto;   background-color: rgba(0,0,0,0.4);' },
prompt { selector: '.modal-body    ', rules: 'padding: 2px 16px;' },
prompt { selector: '.modal-content ', rules: 'position: relative; background-color: #fefefe; margin: auto; padding: 0; border: 1px solid #888; width: 90%;' },
prompt { selector: '.modal-header  ', rules: 'padding: 20px; background-color: #5cb85c; color: white;' },
prompt { selector: '.modal-footer  ', rules: 'padding: 2px 16px; background-color: #5cb85c; color: white;' },
prompt { selector: '.row           ', rules: 'display: table-row;' },
prompt { selector: '.column        ', rules: 'float: left;  padding: 30px;' },
prompt { selector: '.row:after     ', rules: 'content: ""; display: table; clear: both;' },
prompt { selector: 'a              ', rules: 'font:Arial,Helvetica,sans-serif;color:#630;vertical-align:top;margin-top:0;margin-bottom:0;' },
prompt { selector: 'body           ', rules: 'border-left:.5em solid #EBEBEB;border-right:.5em solid #EBEBEB;border-top:.5em solid #d3d3d3;border-bottom:.5em solid #d3d3d3;font:1em Arial,Helvetica,Geneva,sans-serif;color:#000;background:#F8F8F8;' },
prompt { selector: 'h1             ', rules: 'font:bold 1.5em Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:#F8F8F8;border-bottom: 3px double #336699; display: inline-block;margin-top:0pt;margin-bottom:0pt;padding:0px 0px 0px 0px;' },
prompt { selector: 'h2             ', rules: 'font:bold 1.4em Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:#F8F8F8;;border-bottom: 3px double #336699; display: inline-block;margin-top:4pt;margin-bottom:0pt;' },
prompt { selector: 'h3             ', rules: 'font:bold 1.3em Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:#F8F8F8;;border-bottom: 3px double #336699; display: inline-block;margin-top:4pt;margin-bottom:0pt;' },
prompt { selector: 'li             ', rules: 'font:1em Arial,Helvetica,Geneva,sans-serif;color:black;' },
prompt { selector: 'pre            ', rules: 'font:.7em Courier;color:#000;background:#fff;' },
prompt { selector: 'ul             ', rules: 'list-style-type:circle;margin:1em;padding:0;background:#F8F8F8;' },
prompt { selector: 'p              ', rules: 'color:#630; font-size: 1em;' },
prompt { selector: '*              ', rules: 'box-sizing: border-box;' },
prompt ];;

prompt function quote ( line ){return ( "\"" + line + "\"" );}
prompt function addMenu() { var headings = []; var tag_names = { h1:1, h2:1, h3:1, h4:1, h5:1, h6:1 }; function walk( root ) { if( root.nodeType === 1 && root.nodeName !== 'script' ) { if( tag_names.hasOwnProperty(root.nodeName.toLowerCase()) ) { headings.push( root ); } else { for( var i = 0; i < root.childNodes.length; i++ ) { walk( root.childNodes[i] ); } } } } function writemenu() { var anchor_name = ""; var heading_title = ""; var r0 = ""; var r1 = ""; var r2 = ""; var r3 = ""; for( var i = 0; i < headings.length; i++ ) { heading_title = headings[i].innerHTML.trim(); anchor_name = heading_title.split ( " " ).join ( "_" ).trim(); r0 =  "<li><a href=" + quote ( "#" + anchor_name ) + ">" + heading_title + "</a></li>"; if ( i <= headings.length/3 ) { r1 = r1 + r0; } else { if ( i <= headings.length/3*2) { r2 = r2+ r0; } else { r3 = r3 + r0; } } } r0 = "<table><tr valign=top><td><ul>" + r1 + "</ul></td><td><ul>" + r2 + "</ul></td><td><ul>" + r3 + "</ul></td></tr></table>"; document.getElementById('Menu1').innerHTML = r0; } walk( document.body ); writemenu();}
prompt function addRule(stylesheetId, selector, rule) { var stylesheet = document.getElementById(stylesheetId); if (stylesheet) { stylesheet = stylesheet.sheet; if (stylesheet.addRule) { stylesheet.addRule(selector, rule); } else if (stylesheet.insertRule) { stylesheet.insertRule(selector + ' { ' + rule + ' }', stylesheet.cssRules.length); } } }
prompt function addRules() { var index; for (index = 0; index < cssRules.length; index++) { addRule("myStyles", cssRules[index].selector.trim(), cssRules[index].rules); } }
prompt { addMenu(); addRules(); }

prompt </script>

spool off

set define on
set term on
prompt Finished. The spool file is mcl-light.html
quit
prompt <a href="#z-header">Back to Top</a>
